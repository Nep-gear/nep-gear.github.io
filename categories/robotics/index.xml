<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Robotics on Nep Gear</title>
    <link>https://nep-gear.github.io/categories/robotics/index.xml</link>
    <description>Recent content in Robotics on Nep Gear</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://nep-gear.github.io/categories/robotics/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Como mostrar imágenes y videos en la tableta de Pepper</title>
      <link>https://nep-gear.github.io/2018/09/como-mostrar-im%C3%A1genes-y-videos-en-la-tableta-de-pepper/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nep-gear.github.io/2018/09/como-mostrar-im%C3%A1genes-y-videos-en-la-tableta-de-pepper/</guid>
      <description>&lt;p&gt;Este post muestra como mostrar imagenes y videos en Pepper usando el SDK en Python&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;configuración-en-choregraphe&#34;&gt;Configuración en Choregraphe&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.-&lt;/strong&gt; Abrir un nuevo projecto&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2.-&lt;/strong&gt; En project files agregar un nuevo directorio con el nombre de &lt;strong&gt;html&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3.-&lt;/strong&gt; Abrir el archivo &lt;em&gt;manifest.xml&lt;/em&gt; y en &lt;em&gt;Application title&lt;/em&gt; colocar el título del behavior (por ejemplo images o videos)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4.-&lt;/strong&gt; En Application &lt;strong&gt;ID&lt;/strong&gt; colocar el mismo valor del titulo (este valor es fundamental cuando se usa el SDK)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;5.-&lt;/strong&gt; Abrir &lt;em&gt;File/Build Application Package&lt;/em&gt; y seleccionar donde guardar el paquete&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6.-&lt;/strong&gt; Seleccionar la opción &lt;em&gt;Package and install project to the robot&lt;/em&gt; (está abajo del simulador en la pestaña &lt;em&gt;robot applications&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;7.-&lt;/strong&gt; Una vez instalado el paquete, este se puede utilizar para visualizar videos o imagenes usando el SDK en python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;8.-&lt;/strong&gt; Toda imagen o video debe guardarse adentro del folder &lt;strong&gt;html&lt;/strong&gt; creado en paso 2.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dirección-de-los-contenidos&#34;&gt;Dirección de los contenidos&lt;/h2&gt;

&lt;p&gt;El path completo de los behaviors es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/persistent/home/nao/.local/share/PackageManager/apps/&amp;lt;project_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Donde &amp;lt;&lt;strong&gt;project_name&lt;/strong&gt;&amp;gt; es el ID dado en paso 4 en la sección anterior.&lt;/p&gt;

&lt;p&gt;Por lo que el folder html estaría en:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/persistent/home/nao/.local/share/PackageManager/apps/&amp;lt;project_name&amp;gt;/html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;código-para-mostrar-videos&#34;&gt;Código para mostrar videos&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;#! /usr/bin/env python
# -*- encoding: UTF-8 -*-

import qi
import argparse
import sys
import time


def main(session):
    &amp;quot;&amp;quot;&amp;quot;
    This example uses the playVideo method.
    To Test ALTabletService, you need to run the script ON the robot.
    &amp;quot;&amp;quot;&amp;quot;
    # Get the service ALTabletService.

    try:
        tabletService = session.service(&amp;quot;ALTabletService&amp;quot;)

        # Ensure that the tablet wifi is enable
        tabletService.enableWifi()
        tabletService.playVideo(&amp;quot;http://198.18.0.1/apps/&amp;lt;project_name&amp;gt;/video.mp4&amp;quot;)
        
        time.sleep(3)

        # Display the time elapse / the total time of the video
        print tabletService.getVideoPosition(), &amp;quot; / &amp;quot;, tabletService.getVideoLength()


    except Exception, e:
        print &amp;quot;Error was: &amp;quot;, e


if __name__ == &amp;quot;__main__&amp;quot;:
    parser = argparse.ArgumentParser()
    parser.add_argument(&amp;quot;--ip&amp;quot;, type=str, default=&amp;quot;192.168.0.106&amp;quot;,
                        help=&amp;quot;Robot IP address. On robot or Local Naoqi: use &#39;127.0.0.1&#39;.&amp;quot;)
    parser.add_argument(&amp;quot;--port&amp;quot;, type=int, default=9559,
                        help=&amp;quot;Naoqi port number&amp;quot;)

    args = parser.parse_args()
    session = qi.Session()
    try:
        session.connect(&amp;quot;tcp://&amp;quot; + args.ip + &amp;quot;:&amp;quot; + str(args.port))
    except RuntimeError:
        print (&amp;quot;Can&#39;t connect to Naoqi at ip \&amp;quot;&amp;quot; + args.ip + &amp;quot;\&amp;quot; on port &amp;quot; + str(args.port) +&amp;quot;.\n&amp;quot;
               &amp;quot;Please check your script arguments. Run with -h option for help.&amp;quot;)
        sys.exit(1)
    main(session)


&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aqui la función importante es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;tabletService.playVideo(&amp;quot;http://198.18.0.1/apps/videos/video.mp4&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &amp;lt;&lt;strong&gt;project_name&lt;/strong&gt;&amp;gt; es el ID dado en el paso 4 y &lt;strong&gt;video.mp4&lt;/strong&gt; es el nombre del archivo de video a reproducir el cual debe tener una resolución de 1280x800 con codec H.264 (MPG-4 parte 10)&lt;/p&gt;

&lt;p&gt;Notar que no se escribe &lt;em&gt;html&lt;/em&gt; en el path&lt;/p&gt;

&lt;h2 id=&#34;tomar-una-foto-y-guadarla-en-el-robot&#34;&gt;Tomar una foto y guadarla en el robot&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# This test demonstrates how to use the ALPhotoCapture module.
# Note that you might not have this module depending on your distribution
import os
import sys
import time
from naoqi import ALProxy

# Replace this with your robot&#39;s IP address
IP = &amp;quot;192.168.0.106&amp;quot;
PORT = 9559

# Create a proxy to ALPhotoCapture
try:
  photoCaptureProxy = ALProxy(&amp;quot;ALPhotoCapture&amp;quot;, IP, PORT)
except Exception, e:
  print &amp;quot;Error when creating ALPhotoCapture proxy:&amp;quot;
  print str(e)
  exit(1)

photoCaptureProxy.setResolution(2)
photoCaptureProxy.setPictureFormat(&amp;quot;jpg&amp;quot;)
photoCaptureProxy.takePictures(1, &amp;quot;/var/persistent/home/nao/.local/share/PackageManager/apps/&amp;lt;project_name&amp;gt;/html/&amp;quot;, &amp;quot;image&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aqui la función importante es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;photoCaptureProxy.takePictures(1, &amp;quot;/var/persistent/home/nao/.local/share/PackageManager/apps/i&amp;lt;project_name&amp;gt;/html/&amp;quot;, &amp;quot;image&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &amp;lt;&lt;strong&gt;project_name&lt;/strong&gt;&amp;gt; es el ID dado en el paso 4, e &lt;strong&gt;&amp;ldquo;image&amp;rdquo;&lt;/strong&gt; es el nombre del archivo de la imagen de la cual se tomar 1 foto en formato .jpg&lt;/p&gt;

&lt;p&gt;Notar que aqui se escribe &lt;em&gt;html&lt;/em&gt; en el path&lt;/p&gt;

&lt;h2 id=&#34;código-para-mostrar-imágenes&#34;&gt;Código para mostrar imágenes&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;
#! /usr/bin/env python
# -*- encoding: UTF-8 -*-

import qi
import argparse
import sys
import time


def main(session):
    &amp;quot;&amp;quot;&amp;quot;
    This example uses the showImage method.
    To Test ALTabletService, you need to run the script ON the robot.
    &amp;quot;&amp;quot;&amp;quot;
    # Get the service ALTabletService.

    try:
        tabletService = session.service(&amp;quot;ALTabletService&amp;quot;)
        tabletService.showImage(&amp;quot;http://198.18.0.1/apps/&amp;lt;project_name&amp;gt;/image_0.jpg&amp;quot;)

      
    except Exception, e:
        print &amp;quot;Error was: &amp;quot;, e


if __name__ == &amp;quot;__main__&amp;quot;:

    parser = argparse.ArgumentParser()
    parser.add_argument(&amp;quot;--ip&amp;quot;, type=str, default=&amp;quot;192.168.0.106&amp;quot;,
                        help=&amp;quot;Robot IP address. On robot or Local Naoqi: use &#39;127.0.0.1&#39;.&amp;quot;)
    parser.add_argument(&amp;quot;--port&amp;quot;, type=int, default=9559,
                        help=&amp;quot;Naoqi port number&amp;quot;)

    args = parser.parse_args()
    session = qi.Session()
    try:
        session.connect(&amp;quot;tcp://&amp;quot; + args.ip + &amp;quot;:&amp;quot; + str(args.port))
    except RuntimeError:
        print (&amp;quot;Can&#39;t connect to Naoqi at ip \&amp;quot;&amp;quot; + args.ip + &amp;quot;\&amp;quot; on port &amp;quot; + str(args.port) +&amp;quot;.\n&amp;quot;
               &amp;quot;Please check your script arguments. Run with -h option for help.&amp;quot;)
        sys.exit(1)
    main(session)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aqui la función importante es:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;tabletService.showImage(&amp;quot;http://198.18.0.1/apps/&amp;lt;project_name&amp;gt;/image_0.jpg&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;donde &amp;lt;&lt;strong&gt;project_name&lt;/strong&gt;&amp;gt; es el ID dado en el paso 4 e &lt;em&gt;image_0.jpg&lt;/em&gt; es el nombre del archivo de la imagen que se visulizará, la cual debe ser .jpg&lt;/p&gt;

&lt;p&gt;Notar que no se escribe &lt;em&gt;html&lt;/em&gt; en el path&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Conferencias importantes en robótica</title>
      <link>https://nep-gear.github.io/2017/11/conferencias-importantes-en-rob%C3%B3tica/</link>
      <pubDate>Thu, 02 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nep-gear.github.io/2017/11/conferencias-importantes-en-rob%C3%B3tica/</guid>
      <description>&lt;p&gt;Este post contiene links e información de algunas de las conferencia más importantes en róbitca.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;principales-congresos-en-el-mundo&#34;&gt;Principales congresos en el mundo:&lt;/h2&gt;

&lt;p&gt;De todos los congresos en el mundo en robótica solo dos destacan por ser los de mayor calidad, importancia y competitvidad. Estos son el ICRA y el IROS.&lt;/p&gt;

&lt;h3 id=&#34;international-conference-on-robotics-and-automation-icra&#34;&gt;International Conference on Robotics and Automation (ICRA)&lt;/h3&gt;

&lt;p&gt;Celebrado regularmente a finales de mayo con deadline para mandar los artículos a principios de septiembre&lt;/p&gt;

&lt;p&gt;Próximos ICRA:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2019 Canada:&lt;/strong&gt; 20-24 de Mayo del 2019, deadline: 10 Septiembre 2018 (&lt;a href=&#34;http://www.icra2019.org/&#34;&gt;http://www.icra2019.org/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2020 Francia:&lt;/strong&gt; del 31 de Mayo al 4 de junio, deadline: 15 September 2019&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://nep-gear.github.io/img/conf/icra.png&#34; align=&#34;right&#34; style =&#34;float:center&#34; hspace = &#34;20&#34;&gt;
  &lt;figcaption&gt;Entrada al ICRA 2016 en estocolmo&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;international-conference-on-intelligent-robots-and-systems-iros&#34;&gt;International Conference on Intelligent Robots and Systems  (IROS)&lt;/h3&gt;

&lt;p&gt;Celebrado regularmente a principio de octubre con deadline para mandar los artículos a principios de Marzo:&lt;/p&gt;

&lt;p&gt;Próximos IROS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2019 China:&lt;/strong&gt;  3-8 de Noviembre del 2019, deadline: 1 de Marzo (&lt;a href=&#34;http://www.iros2019.org/&#34;&gt;http://www.iros2019.org/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;otras-conferencias-importantes&#34;&gt;Otras conferencias importantes:&lt;/h2&gt;

&lt;p&gt;A continuación se da una lista de algunas conferencias importantes en el area de Control, Human-Robot Interaction, Biorobotica y Machine Learning para robotica.&lt;/p&gt;

&lt;h3 id=&#34;ieee-international-conference-on-robot-and-human-interactive-communication-ro-man&#34;&gt;IEEE International Conference on Robot and Human Interactive Communication (RO-MAN)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2018 China:&lt;/strong&gt;  27-30 de Agosto del 2018, dealine: 5 de Marzo, 2018  &lt;a href=&#34;http://ro-man2018.org/&#34;&gt;http://ro-man2018.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;annual-conference-on-human-robot-interaction&#34;&gt;Annual Conference on Human-Robot Interaction&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2019 Korea&lt;/strong&gt; 11-14 de Marzo, deadline: 10 de Octubre del 2018.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ieee-international-conference-on-robotic-computing&#34;&gt;IEEE International Conference on Robotic Computing&lt;/h3&gt;

&lt;p&gt;Patrocinada por la IEEE computer society y la IEEE Robotics &amp;amp; Automation Society.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2019 Italia&lt;/strong&gt; 25-27 Febrero, (&lt;a href=&#34;http://irc.asia.edu.tw/2019/&#34;&gt;http://irc.asia.edu.tw/2019/&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;ieee-international-conference-ubiquitous-robots&#34;&gt;IEEE International Conference Ubiquitous Robots&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2018 Hawaii&lt;/strong&gt;  (&lt;a href=&#34;http://www.ubiquitousrobots.org/2018/index.php&#34;&gt;http://www.ubiquitousrobots.org/2018/index.php&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-ieee-conferences&#34;&gt;More IEEE conferences:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://ras.papercept.net/&#34;&gt;https://ras.papercept.net/&lt;/a&gt;&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://nep-gear.github.io/img/duda.png&#34; align=&#34;right&#34; style =&#34;float:center&#34; hspace = &#34;20&#34;&gt;
&lt;/figure&gt;</description>
    </item>
    
  </channel>
</rss>